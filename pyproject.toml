[project]
name = "crawl4ai-mcp"
version = "0.1.0"
description = "MCP server for integrating web crawling and RAG into AI agents and AI coding assistants"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "crawl4ai==0.6.2",
    "fastmcp>=2.11.0",
    "supabase==2.15.1",
    "openai==1.71.0",
    "dotenv==0.9.9",
    "sentence-transformers>=4.1.0",
    "neo4j>=5.28.1",
    "requests>=2.25.0",
    "qdrant-client>=1.7.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.5.0",
    "docker>=6.0.0",
    "testcontainers>=3.7.0",
    "psutil>=5.9.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# ========================================
# RUFF CONFIGURATION
# ========================================
[tool.ruff]
target-version = "py312"
line-length = 88
indent-width = 4
exclude = [
    ".git",
    ".pytest_cache",
    "__pycache__",
    ".venv",
    "htmlcov",
    "archived_configs",
    "searxng-backup",
    "searxng-test",
    "qdrant-config",
    "logs",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls
    "FBT003",
    # Ignore complexity (covered by other tools)
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements (useful for debugging MCP servers)
    "T201",
    # Allow broad exception handling (common in async code)
    "BLE001",
    # Allow string formatting in logging (common pattern)
    "G002",
    # Allow TODO comments
    "FIX002",
    # Allow missing type annotations in tests
    "ANN",
    # Allow assert statements in tests
    "S101",
    # Docstring rules - be more lenient
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "D200", "D212", "D415",
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use more relaxed rules
"tests/**" = [
    "S101",    # Allow assert
    "ANN",     # No type annotations required
    "D",       # No docstrings required
    "PLR2004", # Allow magic values
    "S106",    # Allow hardcoded passwords in tests
    "S108",    # Allow temp file creation
    "ARG",     # Allow unused function arguments (fixtures)
    "PT011",   # Allow broad pytest.raises
]

# Scripts and utilities can be more relaxed
"scripts/**" = ["T201", "S602", "S603", "S607"]
"knowledge_graphs/**" = ["T201", "S602", "S603", "S607"]

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]
split-on-trailing-comma = true
force-single-line = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# ========================================
# PYTEST CONFIGURATION
# ========================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests that require network access",
    "docker: marks tests that require Docker",
    "qdrant: marks tests that require Qdrant",
    "neo4j: marks tests that require Neo4j",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
]

# ========================================
# COVERAGE CONFIGURATION
# ========================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    ".venv/*",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ========================================
# MYPY CONFIGURATION
# ========================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Be lenient initially
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# ========================================
# BANDIT CONFIGURATION
# ========================================
[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]  # Skip assert and shell injection in specific contexts
